/* list.h */

#ifndef LIST
#define LIST

typedef struct list {
	void* data;				// указатель на данные (объект)
	struct list* next;		// указатель на следующий элемент списка или NULL, если это последний элемент списка
	struct list* prev;		// указатель на предыдущий элемент списка или NULL, если это первый элемента списка
} list;


#define TO_FIRST(x) while(x->prev) x = x->prev
#define TO_LAST(x) while(x->next) x = x->next

/* Добавляет новый элемент списка за тем, на который указывает ls.
 Возвращаемое значение - указатель на новый элемент list  */
list* list_add(list* ls);

/* Удаляет элемент списка на который указывает ls.
 Возвращаемое значение - указатель на элемент списка, который находится в направлении к началу
 относительно удаленного элемента */
list* list_del(list* ls);

/* Перемещает элемент списка ls в направлении вверх т.е. от конца к началу.
 Фактически перемещения не происходит а изменяются поля next, prev элементов списка.
 Возвращанмое значение - 0 при успехе перемещения, -1 если текущий элемент стал первым в списке. */
int list_up(list* ls);

/* Перемещает элемент списка ls в направлении вниз т.е. от начала к концу.
 Фактически перемещения не происходит а изменяются поля next, prev элементов списка.
 Возвращанмое значение - 0 при успехе перемещения, -1 если текущий элемент стал последним в списке. */
int list_down(list* ls);

/* Возвращает число элементов списка */
int list_count(list* ls);

/* Создание списка
 * list* ls = NULL;
 * ls = list_add(ls);
 *
 * Наполнение списка элементами
 * list* ls = NULL;
 * while(Условие) {
 * 	ls = list_add(ls);
 * 	ls->data = malloc(sizeof(data_type));
 * 	ls->data->field1 = xyz;
 * 	......
 * 	}
 *
 *
 * Цикл перебора элементов списка от текущего к последнему:
 * Вариант 1
 * list* tmp = ls;
 * while(ls) {
 *...............
 * работа с ls->data
 *...............
 * ls = ls->next;
 * };
 * Т.к. ls  указывает на NULL, нужно вернуть его начальное значение
 * ls = tmp;
 *
 * Вариант 2
 * for(list *tmp = ls; tmp; tmp = tmp->next) {
 * ........
 * работа с tmp->data
 * ........
 * }
 *
 * Переход на первый элемент списка
 * while(ls->prev) ls = ls->prev;
 *
 * Переход на последний элемент списка
 * WHile(ls->next) ls = ls->next;
*/

#endif
